{
	"info": {
		"_postman_id": "1875851b-08c5-4677-ae12-efd98f13f141",
		"name": "Final",
		"description": "This collection tests the API specification given for Assignment 3.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_boat_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_slip_id\n- Set it to a value that's not an ID of any slip in your porject. I have set it to 1 and that should work for you as well.\n\nChange log:\n- Oct 15, 9:30 am. Test \"edit boat with invalid id 404\" has been modified. The request body now includes all the attributes so that this test now tests only for invalid id.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clear datastore for testing ",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/clear",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"clear"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Boat: Add boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Boat: Add boat with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Boat: Get boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Boat: Update just length to 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(1000);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"length\": 1000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Boat: Get boat 200 Copy Copy Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(1000);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Boat: Update All Fields to have ' 1' at end and length to 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey1\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatchone\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(5);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey1\",\r\n  \"type\": \"Yatchone\",\r\n  \"length\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Boat: Get boat 200 Copy Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey1\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatchone\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(5);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Boat: Get boat with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					],
					"query": [
						{
							"key": "Authorization",
							"value": "{{jwt_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Load: Add load 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Legos\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1,\r\n  \"content\": \"Legos\",\r\n  \"delivery_date\": \"1/1/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Load: Add load with missing attribute 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing the required number\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Load: Update just one property Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"3/3/2020\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"delivery_date\": \"3/3/2020\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Load: Get loads 200 Copy Copy Copy Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"3/3/2020\");",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Legos\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Load: Update All Fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tostinos\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"5/5/2020\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 10,\r\n  \"content\": \"tostinos\",\r\n  \"delivery_date\": \"5/5/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Load: Get Load",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tostinos\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"5/5/2020\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Load: Get load with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Add another boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mega Boat\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Mega Boat\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Load is loaded on a boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Load is already assigned to another boat 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The load is already assigned to another boat.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Load is put on an invalid boat 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don’t exist.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Invalid load is put on a boat 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don’t exist.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Invalid load is put on an invalid boat 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don’t exist.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Get all loads of the current boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84f72d70-cba9-4887-a6f4-b7ba77ff4fb2",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"     pm.expect(pm.response.json()[0][\"carrier\"][\"id\"]).to.eq(pm.environment.get(\"boat_id_1\"));",
							"     pm.expect(pm.response.json()[0][\"id\"]).to.eq(pm.environment.get(\"load_id\"));",
							"    ",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[0][\"id\"];",
							"    pm.expect(pm.response.json()[0][\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads"
					],
					"query": [
						{
							"key": "Authorization",
							"value": "{{jwt_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Get load before removing 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"     pm.expect(pm.response.json()[\"carrier\"][\"id\"]).to.eq(pm.environment.get(\"boat_id_1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Remove load from boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Remove load from invalid boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is assigned to a boat with this boat_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Remove invalid load from boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is assigned to a boat with this boat_id\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Remove invalid load from invalid boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id is assigned to a boat with this boat_id\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Get boat loads after removing 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4421d368-6375-4506-9ea2-d296287efc08",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Zero loads exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.eq(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Managing: Get load after removing 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"",
							"     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					],
					"query": [
						{
							"key": "Authorization",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Many to 1: Add load_id_1 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(25);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Bananas\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"4/4/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 25,\r\n  \"content\": \"Bananas\",\r\n  \"delivery_date\": \"4/4/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Many to 1: Add load_id_2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Legos\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1,\r\n  \"content\": \"Legos\",\r\n  \"delivery_date\": \"1/1/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Many to 1: Add boat_id_2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Black Pearl\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Sail Boat\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(65);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Black Pearl\",\r\n  \"type\": \"Sail Boat\",\r\n  \"length\": 65\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Many to 1: Load load_id_2 on a boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads/{{load_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads",
						"{{load_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Many to 1: Load load_id_1 on same boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads/{{load_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads",
						"{{load_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View all Loads of a Boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84f72d70-cba9-4887-a6f4-b7ba77ff4fb2",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[0]['id']).to.eq(pm.environment.get('load_id_2'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[0]['id'];",
							"    pm.expect(pm.response.json()[0]['self']).to.eq(self_url);",
							"    ",
							"    pm.expect(pm.response.json()[1]['id']).to.eq(pm.environment.get('load_id_1'));",
							"    const self_url_2 = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[1]['id'];",
							"    pm.expect(pm.response.json()[1]['self']).to.eq(self_url_2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Add new  boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "666aa0a4-6ba7-40d1-9fe1-88285af299eb",
						"exec": [
							"pm.environment.set(\"boat_id_delete\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Delete Me\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Cardboard boat\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Delete Me\",\r\n  \"type\": \"Cardboard boat\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Add new load 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "666aa0a4-6ba7-40d1-9fe1-88285af299eb",
						"exec": [
							"pm.environment.set(\"load_id_temp\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(25);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Chips\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"4/4/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Auithorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 25,\r\n  \"content\": \"Chips\",\r\n  \"delivery_date\": \"4/4/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Load load on new boat 204 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_delete}}/loads/{{load_id_temp}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_delete}}",
						"loads",
						"{{load_id_temp}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: View all loads of current boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84f72d70-cba9-4887-a6f4-b7ba77ff4fb2",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[0]['id']).to.eq(pm.environment.get('load_id_temp'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[0]['id'];",
							"    pm.expect(pm.response.json()[0]['self']).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_delete}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_delete}}",
						"loads"
					],
					"query": [
						{
							"key": "Authorization",
							"value": "{{jwt_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Get new load 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(25);",
							"    pm.expect(pm.response.json()[\"carrier\"]).not.to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Chips\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"4/4/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_temp}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_temp}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Delete boat load 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_delete}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_delete}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Delete invalid boat load 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					],
					"query": [
						{
							"key": "Authroization",
							"value": "{{jwt_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Boat Delete: Get new load  after delete 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(25);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Chips\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"4/4/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_temp}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_temp}}"
					],
					"query": [
						{
							"key": "Authorization",
							"value": "{{jwt_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Delete: Add new load 201 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "666aa0a4-6ba7-40d1-9fe1-88285af299eb",
						"exec": [
							"pm.environment.set(\"load_id_delete\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(25);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Chips\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"4/4/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 25,\r\n  \"content\": \"Chips\",\r\n  \"delivery_date\": \"4/4/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Delete: Load new load on current boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads/{{load_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads",
						"{{load_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Delete: View all loads of current boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84f72d70-cba9-4887-a6f4-b7ba77ff4fb2",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[0]['id']).to.eq(pm.environment.get('load_id_2'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[0]['id'];",
							"    pm.expect(pm.response.json()[0]['self']).to.eq(self_url);",
							"    ",
							"    pm.expect(pm.response.json()[1]['id']).to.eq(pm.environment.get('load_id_1'));",
							"    const self_url_2 = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[1]['id'];",
							"    pm.expect(pm.response.json()[1]['self']).to.eq(self_url_2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Delete: Delete new load 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id_delete}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id_delete}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Delete: Delete invalid load 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Delete: View all loads of current boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84f72d70-cba9-4887-a6f4-b7ba77ff4fb2",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[0]['id']).to.eq(pm.environment.get('load_id_2'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[0]['id'];",
							"    pm.expect(pm.response.json()[0]['self']).to.eq(self_url);",
							"    ",
							"    pm.expect(pm.response.json()[1]['id']).to.eq(pm.environment.get('load_id_1'));",
							"    const self_url_2 = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[1]['id'];",
							"    pm.expect(pm.response.json()[1]['self']).to.eq(self_url_2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_2}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_2}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Add boat_id_3 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_3\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"user1\", pm.response.json()[\"owner\"]);",
							"",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Altuve\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Schooner\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(6);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Altuve\",\r\n  \"type\": \"Schooner\",\r\n  \"length\": 6\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_4 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_4\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_5 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_5\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"user2\", pm.response.json()[\"owner\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_6 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_6\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_7 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_7\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_8 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_8\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_9 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_9\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_10 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_10\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: add boat_id_11 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_11\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jolly Roger\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Pirate\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Jolly Roger\",\r\n  \"type\": \"Pirate\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Add load_id_3 201 ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Legos\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1,\r\n  \"content\": \"Legos\",\r\n  \"delivery_date\": \"1/1/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Add load_id_4 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id_4\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Oranges\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"3/3/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1,\r\n  \"content\": \"Oranges\",\r\n  \"delivery_date\": \"3/3/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Add load_id_5 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Avocados\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/5/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1,\r\n  \"content\": \"Avocados\",\r\n  \"delivery_date\": \"1/5/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Add load_id_6 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54871a0f-16d9-421a-965f-6881e5cf0750",
						"exec": [
							"pm.environment.set(\"load_id_6\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Peanuts\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
							"    ",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1,\r\n  \"content\": \"Peanuts\",\r\n  \"delivery_date\": \"1/1/2020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Get first 5 boats 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.environment.set(\"next_url_boats\", pm.response.json()[0][\"next\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Three boats are returned with next links\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.eq(5);",
							"   pm.expect(pm.response.json()[0]['next']).to.eq(pm.environment.get('app_url') + '/boats?limit=5&offset=5')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats?limit=5&offset=0",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Get second page of boats 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"next_url_boats\", pm.response.json()[0][\"next\"]);",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{next_url_boats}}",
					"host": [
						"{{next_url_boats}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Get last page of boatss 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{next_url_boats}}",
					"host": [
						"{{next_url_boats}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Get first 5 loads 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.environment.set(\"next_url_loads\", pm.response.json()[0][\"next\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"5 loads are returned with next links\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.eq(5);",
							"   pm.expect(pm.response.json()[0]['next']).to.eq(pm.environment.get('app_url') + '/loads?limit=5&offset=5')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads?limit=5&offset=0",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pagination: Get second page of Loads 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"",
							"",
							"",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The second page of loads is displayed\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{next_url_loads}}",
					"host": [
						"{{next_url_loads}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View User 1's Boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"",
							"",
							"",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"More than 3 boats are returned with user 1 as owner\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(3);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "Content-type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/users/{{user1}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user1}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "View User 2's Boats (3 - boats 5, 6, and 7)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"",
							"",
							"",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Three boats are returned with user 2 as owner\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.eq(3);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/users/{{user2}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user2}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization: Add boat 201 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"boat_id_auth\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Auth Test\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Temp\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(100);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Auth Test\",\r\n  \"type\": \"Temp\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization: Edit boat with different user than owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7044ecc5-5815-4fd5-ae38-2c3c9a7fd5be",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Auth Test\",\r\n  \"type\": \"Temp\",\r\n  \"length\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization: Delete Boat with different user than owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae3847ac-dd66-4637-80ca-1037d304c54a",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization : Edit boat with invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc664b31-c2e6-4a55-b352-28458704b14e",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_token_invalid}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Auth Test dont change\",\r\n  \"type\": \"Temp\",\r\n  \"length\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization : Edit boat with  missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be20db55-91d4-414b-af0e-c51fb6b82ac3",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "",
						"disabled": true
					},
					{
						"key": "Content-type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Auth Test dont change 2\",\r\n  \"type\": \"Temp\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization: Delete boat with invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd4c4442-bdeb-4178-b9ac-f1d2eb382225",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_token_invalid}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization: Delete boat with missing token Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4fece285-7773-459c-b0e6-5f3170360316",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 200 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0c645a3-f100-4144-911b-b3a3a6e0ecb4",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 201 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d74898b0-1da7-401a-a012-b172ae3fdf77",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.environment.set(\"err_boat\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Auth Test\",\r\n  \"type\": \"Temp\",\r\n  \"length\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 204 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08794bf8-c88e-483b-aa13-e5baa6a7d5e0",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{err_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{err_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 401 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5779b815-4c02-4f08-8c8a-911f6cff48f3",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 403 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91a8ff6d-b530-43cd-83be-9b8052c4ca43",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_token_2}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_auth}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_auth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 405 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc4879a6-08d7-4d36-8d83-5625863b5e21",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "COPY",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Handling: 406 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "833d9573-51a3-4a48-9963-657382124c62",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "html",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "42aac422-9426-4c94-b0f1-5e1b9218971e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e41c7b2-d777-46d4-b524-7cad7edb5875",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}